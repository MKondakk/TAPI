{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"NotFoundError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Not found"
						],
						"nullable": false
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"InternalError": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Internal Server Error"
						],
						"nullable": false
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Response": {
				"description": "This Fetch API interface represents the response to a request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)",
				"properties": {},
				"type": "object",
				"additionalProperties": false
			},
			"ValidateErrorJSON": {
				"properties": {
					"message": {
						"type": "string",
						"enum": [
							"Validation failed"
						],
						"nullable": false
					},
					"details": {
						"type": "string"
					}
				},
				"required": [
					"message",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Species": {
				"enum": [
					"cat",
					"dog",
					"rabbit",
					"guineapig",
					"parrot"
				],
				"type": "string"
			},
			"Pick_Patient.Exclude_keyofPatient.id__": {
				"properties": {
					"ownerId": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"species": {
						"$ref": "#/components/schemas/Species"
					},
					"breed": {
						"type": "string"
					},
					"age": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"ownerId",
					"name",
					"species"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Patient.id_": {
				"$ref": "#/components/schemas/Pick_Patient.Exclude_keyofPatient.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreatePatientRequest": {
				"$ref": "#/components/schemas/Omit_Patient.id_"
			},
			"Name": {
				"properties": {
					"firstName": {
						"type": "string"
					},
					"middleName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					}
				},
				"required": [
					"firstName",
					"lastName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Owner.Exclude_keyofOwner.id__": {
				"properties": {
					"name": {
						"$ref": "#/components/schemas/Name"
					},
					"contactNumber": {
						"type": "string"
					},
					"address": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"contactNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Owner.id_": {
				"$ref": "#/components/schemas/Pick_Owner.Exclude_keyofOwner.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateOwnerRequest": {
				"$ref": "#/components/schemas/Omit_Owner.id_"
			},
			"Pick_Doctor.Exclude_keyofDoctor.id-or-hireDate__": {
				"properties": {
					"name": {
						"$ref": "#/components/schemas/Name"
					},
					"specialization": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"specialization"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Doctor.id-or-hireDate_": {
				"$ref": "#/components/schemas/Pick_Doctor.Exclude_keyofDoctor.id-or-hireDate__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateDoctorRequest": {
				"$ref": "#/components/schemas/Omit_Doctor.id-or-hireDate_"
			},
			"Status": {
				"enum": [
					"scheduled",
					"completed"
				],
				"type": "string"
			},
			"Pick_Appointment.Exclude_keyofAppointment.id__": {
				"properties": {
					"patientId": {
						"type": "number",
						"format": "double"
					},
					"doctorId": {
						"type": "number",
						"format": "double"
					},
					"date": {
						"type": "string",
						"format": "date-time"
					},
					"reason": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/Status"
					}
				},
				"required": [
					"patientId",
					"doctorId",
					"date",
					"status"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Appointment.id_": {
				"$ref": "#/components/schemas/Pick_Appointment.Exclude_keyofAppointment.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateAppointmentRequest": {
				"$ref": "#/components/schemas/Omit_Appointment.id_"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "vet-clinic-rest-server",
		"version": "1.0.0",
		"description": "Express.js based web service for managing veterinarian clinic",
		"contact": {
			"name": "Kondak Mariia"
		}
	},
	"paths": {
		"/api/patients": {
			"get": {
				"operationId": "GetPatients",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": 10,
												"ownerId": 1,
												"name": "Lola",
												"species": "cat"
											}
										]
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a list of patients",
				"tags": [
					"Patient"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "ownerId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreatePatient",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 10,
											"ownerId": 1,
											"name": "Lola",
											"species": "cat"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Create a new patient",
				"tags": [
					"Patient"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePatientRequest"
							}
						}
					}
				}
			}
		},
		"/api/patients/{id}": {
			"get": {
				"operationId": "GetPatientById",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 10,
											"ownerId": 1,
											"name": "Lola",
											"species": "cat"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a specific patient by ID",
				"tags": [
					"Patient"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdatePatient",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 10,
											"ownerId": 1,
											"name": "Lola",
											"species": "cat"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Update an existing patient by ID",
				"tags": [
					"Patient"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePatientRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeletePatient",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Delete a patient by ID",
				"tags": [
					"Patient"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/owners": {
			"get": {
				"operationId": "GetOwners",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": 10,
												"name": {
													"firstName": "John",
													"middleName": "One",
													"lastName": "Doe"
												},
												"contactNumber": "+48777999000"
											}
										]
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a list of owners",
				"tags": [
					"Owner"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "CreateOwner",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 10,
											"name": {
												"firstName": "John",
												"middleName": "One",
												"lastName": "Doe"
											},
											"contactNumber": "+48777999000"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Create a new owner",
				"tags": [
					"Owner"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOwnerRequest"
							}
						}
					}
				}
			}
		},
		"/api/owners/{id}": {
			"get": {
				"operationId": "GetOwnerById",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 10,
											"name": {
												"firstName": "John",
												"middleName": "One",
												"lastName": "Doe"
											},
											"contactNumber": "+48777999000"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a specific owner by ID",
				"tags": [
					"Owner"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateOwner",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 10,
											"name": {
												"firstName": "John",
												"middleName": "One",
												"lastName": "Doe"
											},
											"contactNumber": "+48777999000"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Update an existing owner by ID",
				"tags": [
					"Owner"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOwnerRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteOwner",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Delete an owner by ID",
				"tags": [
					"Owner"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/doctors": {
			"get": {
				"operationId": "GetDoctors",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": 3,
												"name": {
													"firstName": "Jan",
													"lastName": "Pawel"
												},
												"specialization": "Internista",
												"hireDate": "2025-01-29T12:54:08.290Z",
												"email": "jan.pawel@clinic.com",
												"phone": "611892343"
											}
										]
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a list of doctors",
				"tags": [
					"Doctor"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "CreateDoctor",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 3,
											"name": {
												"firstName": "Jan",
												"lastName": "Pawel"
											},
											"specialization": "Internista",
											"hireDate": "2025-01-29T12:54:08.291Z",
											"email": "jan.pawel@clinic.com",
											"phone": "611892343"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Create a new doctor",
				"tags": [
					"Doctor"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDoctorRequest"
							}
						}
					}
				}
			}
		},
		"/api/doctors/{id}": {
			"get": {
				"operationId": "GetDoctorById",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 3,
											"name": {
												"firstName": "Jan",
												"lastName": "Pawel"
											},
											"specialization": "Internista",
											"hireDate": "2025-01-29T12:54:08.291Z",
											"email": "jan.pawel@clinic.com",
											"phone": "611892343"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a specific doctor by ID",
				"tags": [
					"Doctor"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateDoctor",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 3,
											"name": {
												"firstName": "Jan",
												"lastName": "Pawel"
											},
											"specialization": "Internista",
											"hireDate": "2025-01-29T12:54:08.294Z",
											"email": "jan.pawel@clinic.com",
											"phone": "611892343"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Update an existing doctor by ID",
				"tags": [
					"Doctor"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDoctorRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteDoctor",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Delete a doctor by ID",
				"tags": [
					"Doctor"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/appointments": {
			"get": {
				"operationId": "GetAppointments",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": [
											{
												"id": 123,
												"patientId": 10,
												"doctorId": 3,
												"date": "2025-01-29T12:54:08.295Z",
												"status": "scheduled"
											}
										]
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a list of appointments",
				"tags": [
					"Appointment"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "doctorId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "patientId",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateAppointment",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 123,
											"patientId": 10,
											"doctorId": 3,
											"date": "2025-01-29T12:54:08.297Z",
											"status": "scheduled"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Create a new appointment",
				"tags": [
					"Appointment"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAppointmentRequest"
							}
						}
					}
				}
			}
		},
		"/api/appointments/{id}": {
			"get": {
				"operationId": "GetAppoinmentById",
				"responses": {
					"200": {
						"description": "Fulfilled",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 123,
											"patientId": 10,
											"doctorId": 3,
											"date": "2025-01-29T12:54:08.296Z",
											"status": "scheduled"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Retrieve a specific appointment by ID",
				"tags": [
					"Appointment"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateAppointment",
				"responses": {
					"200": {
						"description": "Updated",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"id": 123,
											"patientId": 10,
											"doctorId": 3,
											"date": "2025-01-29T12:54:08.300Z",
											"status": "scheduled"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Response"
								}
							}
						},
						"headers": {
							"ValidateErrorJSON": {
								"schema": {
									"$ref": "#/components/schemas/ValidateErrorJSON"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Update an existing appointment by ID",
				"tags": [
					"Appointment"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateAppointmentRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteAppointment",
				"responses": {
					"200": {
						"description": "Deleted",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "Not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundError"
								}
							}
						}
					},
					"500": {
						"description": "Unexpected error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InternalError"
								}
							}
						}
					}
				},
				"summary": "Delete an appointment by ID",
				"tags": [
					"Appointment"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:3000",
			"description": "Local development"
		}
	]
}